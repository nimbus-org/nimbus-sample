<?xml version="1.0" encoding="Shift_JIS"?>
<!DOCTYPE server PUBLIC
  "-//Nimbus//DTD Nimbus 1.0//JA"
  "http://nimbus.sourceforge.jp/dtd/nimbus-service_1_0.dtd">

<server>
    
    <!-- デフォルトのログ出力のログ出力レベルを設定する
      デフォルトのログは、コンソールに出力される。
      デフォルトの出力レベルはinformation以上である。
    -->
    <default-log>
        <debug output="false"/>
        <information output="false"/>
        <warning output="true"/>
        <error output="true"/>
        <fatal output="true"/>
    </default-log>
    
    <manager>
        
        <service name="Service1"
                 code="sample.service.POJOService">
            
            <!-- コンストラクタインジェクション
                 コンストラクタを指定して生成する。
                 この要素は、１つしか指定できない。
                 
                 以下のJavaコードに相当する。
                 POJOService service2 = new POJOService("こんにちは");
            -->
            <constructor>
                
                <!-- コンストラクタの引数を指定する
                   この要素は、引数の数の分だけ複数指定する事が可能である。
                   type属性で引数の型を指定する。
                   type属性は、以下の場合省略可能。
                     ・引数の型がjava.lang.Stringの場合
                     ・子要素がobject要素で、そのオブジェクトの型が引数の型と一致する場合
                -->
                <argument>こんにちは</argument>
                
            </constructor>
            
            <!-- フィールドインジェクション
              publicなインスタンス変数に値を設定する。
              name属性で、フィールド名を指定する。
              
              以下のJavaコードに相当する。
              service2.isPrint = true;
            -->
            <field name="isPrint">true</field>
            
            <!-- PropertyEditorによる値の設定
              argument、field、attribute要素の内容に文字列を書いた場合、
              その型に対応するPropertyEditorが登録されていれば、PropertyEditor
              によって、文字列からその型のオブジェクトに変換される。
              文字列の書式は、PropertyEditorの実装に依存する。
              デフォルトで、登録されているPropertyEditorは、jp.ossc.nimbus.beans
              パッケージに用意されているものである。
              それ以外のPropertyEditorを追加及び変更したい場合は、property-editors要素で設定する。
              
              以下のJavaコードに相当する。
              Properties prop = new Properties();
              prop.setProperty("A", "1");
              prop.setProperty("B", "2");
              prop.setProperty("C", "3");
              service2.properties = prop;
            -->
            <field name="map" type="java.util.Properties">
                A=1
                B=2
                C=3
            </field>
            
            <!-- セッターインジェクション
              セッターを呼び出す。
              name属性で、セッターsetXXX(YYY)のXXX部分を指定する。
              type属性で、引数の型YYYを指定する。
              type属性は、以下の場合省略可能。
                ・要素の内容が文字列で、該当するメソッド名のセッターの引数の型に
                  該当するPropertyEditorで、その文字列を編集してよい場合
                ・子要素がobject要素で、そのオブジェクトの型が引数の型と一致する場合
              
              以下のJavaコードに相当する。
              service2.setIntValue(100);
            -->
            <attribute name="IntValue">100</attribute>
            
            <!-- キー指定セッターインジェクション
              キー指定セッターを呼び出す。
              name属性で、セッターsetXXX(String KEY, YYY val)のXXXとKEYの部分を指定する。
              指定方法は、XXX(KEY)となる。
              type属性で、引数の型YYYを指定する。
              type属性は、以下の場合省略可能。
                ・要素の内容が文字列で、該当するメソッド名のセッターの引数の型に
                  該当するPropertyEditorで、その文字列を編集してよい場合
                ・子要素がobject要素で、そのオブジェクトの型が引数の型と一致する場合
              
              以下のJavaコードに相当する。
              service2.setMapValue("D", 4);
            -->
            <attribute name="MapValue(D)">4</attribute>
            
            <!-- インデックス指定セッターインジェクション
              インデックス指定セッターを呼び出す。
              name属性で、セッターsetXXX(int INDEX, YYY val)のXXXとKEYの部分を指定する。
              指定方法は、XXX[INDEX]となる。
              type属性で、引数の型YYYを指定する。
              type属性は、以下の場合省略可能。
                ・要素の内容が文字列で、該当するメソッド名のセッターの引数の型に
                  該当するPropertyEditorで、その文字列を編集してよい場合
                ・子要素がobject要素で、そのオブジェクトの型が引数の型と一致する場合
              
              以下のJavaコードに相当する。
              Map map = new HashMap();
              map.put("Hoge", new Integer(1));
              service2.setIndexValue(0, map);
            -->
            <attribute name="IndexValue[0]">
                
                <!-- オブジェクトインジェクション
                  引数として任意のオブジェクトを生成する。
                  code属性で、生成するクラス名を完全修飾クラス名で指定する。
                  この要素は、argument、field、attribute要素の子要素に指定できる。
                -->
                <object code="java.util.HashMap">
                    
                    <!-- Mapセッターインジェクション
                      java.util.Mapインタフェースのput(String, Object)メソッドを呼び出す。
                      name属性で、セッターput(String KEY, Object val)のKEYの部分を指定する。
                      要素の内容が文字列で、putメソッドの第2引数に渡したいオブジェクト
                      の型がString型以外で、その型に該当するPropertyEditorで、
                      その文字列を編集したい場合、type属性で型を指定する。
                      
                      以下のJavaコードに相当する。
                      map.put("Hoge", new Integer(1));
                    -->
                    <attribute name="Hoge" type="int">1</attribute>
                </object>
                
            </attribute>
            
            <!-- ネストセッターインジェクション
              ネストしたプロパティのセッターを呼び出す。
              name属性で、ネストしたプロパティのセッターを指定する。
              指定方法は、A.Bとなる。
              type属性で、引数の型YYYを指定する。
              type属性は、以下の場合省略可能。
                ・要素の内容が文字列で、該当するメソッド名のセッターの引数の型に
                  該当するPropertyEditorで、その文字列を編集してよい場合
                ・子要素がobject要素で、そのオブジェクトの型が引数の型と一致する場合
              
              以下のJavaコードに相当する。
              ((Map)service2.getIndexValue(0)).put("Fuga", new Integer(2));
            -->
            <attribute name="IndexValue[0].Fuga" type="int">2</attribute>
            
            <!-- メソッドインジェクション
              メソッドを呼び出す
              name属性で、メソッド名を指定する。
              callState属性で、サービスのライフサイクルに関連付けて、メソッド
              呼び出しのタイミングを指定する。
              指定できる値は、"Creating"、"Created"、"Starting"、"Started"、
              "Stopping"、"Stopped"、"Destorying"、"Destroyed"のいづれか。
              
              以下のJavaコードに相当する。
              service2.printMessage();
            -->
            <invoke name="printMessage"/>
            
            <!-- 引数ありのメソッドインジェクション
              
              引数ありのメソッドを呼び出す場合は、引数の数だけ、
              子要素にargument要素を指定する。
              
              以下のJavaコードに相当する。
              service2.printMap((Map)ServiceManagerFactory.getServiceObject("Nimbus", "Service2"));
            -->
            <invoke name="printMap" callState="Started">
                
                <!-- メソッドの引数を指定する
                   この要素は、引数の数の分だけ複数指定する事が可能である。
                   type属性で引数の型を指定する
                   type属性は、以下の場合省略可能
                     ・引数の型がjava.lang.Stringの場合
                     ・子要素がobject要素で、そのオブジェクトの型が引数の型と一致する場合
                   isNullValue属性にtrueを指定すると、nullの引数を渡せる。
                -->
                <argument type="java.util.Map">
                    
                    <!-- サービスインジェクション
                      引数として任意のサービスを取得して設定する。
                      異なるマネージャにグルーピングされたサービスに依存する
                      場合は、manager-name属性で、そのマネージャ名を指定しな
                      ければならない。
                      但し、もう１つ記述法があり、この要素の内容に
                      マネージャ名#サービス名の形式で指定する事もできる。
                      その記述法で指定する場合、同じマネージャのサービスは、
                      #サービス名のようにマネージャ名を省略する事ができる。
                      この要素は、argument、field、attribute要素の子要素に指定できる。
                    -->
                    <service-ref>#Service2</service-ref>
                    
                </argument>
                
            </invoke>
            
            <!-- 引数ありのメソッドインジェクション -->
            <invoke name="printArray">
                
                <argument type="java.lang.Object[]">
                    
                    <!-- 配列オブジェクトインジェクション
                      配列型は、[Ljava.lang.Object;のように、javaの配列文字列
                      表現で指定する方法と、java.lang.Object[]のように、javaの
                      言語仕様上の記述に従って指定する方法の双方をサポートする。
                    -->
                    <object code="java.lang.String[]">
                        
                        <!-- コンストラクタの引数として、配列の要素を指定する -->
                        <constructor>
                            <argument>A</argument>
                            <argument>B</argument>
                            <argument>C</argument>
                            <argument nullValue="true"/>
                        </constructor>
                    </object>
                </argument>
                
            </invoke>
            
            <!-- セッターインジェクション -->
            <attribute name="Calendar">
                
                <!-- オブジェクトインジェクション -->
                <object code="java.util.Calendar">
                    
                    <!-- コンストラクタインジェクション
                      staticなファクトリメソッドを呼び出してインスタンスを生成する。
                      
                      以下のJavaコードに相当する。
                      java.util.Calendar calendar = java.util.Calendar.getInstance();
                    -->
                    <constructor>
                        
                        <!-- 静的メソッドインジェクション
                          staticメソッドを呼び出し、戻り値をインジェクションする。
                          code属性で、呼び出し対象のクラス名を指定する。
                          name属性で、メソッド名を指定する。
                        -->
                        <static-invoke code="java.util.Calendar" name="getInstance"/>
                        
                    </constructor>
                    
                    <!-- 引数ありのメソッドインジェクション -->
                    <invoke name="set">
                        
                        <argument type="int">
                            
                            <!-- 静的フィールドインジェクション
                              staticフィールドを参照して、その値をインジェクションする。
                              code属性で、呼び出し対象のクラス名を指定する。
                              name属性で、メソッド名を指定する。
                            -->
                            <static-field-ref code="java.util.Calendar" name="YEAR"/>
                            
                        </argument>
                        
                        <argument type="int">1974</argument>
                        
                    </invoke>
                    
                </object>
                
            </attribute>
            
            <!-- セッターインジェクション -->
            <attribute name="ImageWriter">
                
                <!-- オブジェクトインジェクション -->
                <object code="javax.imageio.ImageWriter">
                    
                    <!-- コンストラクタインジェクション
                      インスタンスメソッドを呼び出してインスタンスを生成する。
                    -->
                    <constructor>
                        
                        <!-- 呼び出し対象を指定したメソッドインジェクション
                          
                          以下のJavaコードに相当する。
                          java.util.Iterator itr = javax.imageio.ImageIO.getImageWritersByFormatName("jpeg");
                          javax.imageio.ImageWriter iw = (javax.imageio.ImageWriter)itr.next();
                        -->
                        <invoke name="next">
                            
                            <!-- 呼び出し対象を指定する
                              呼び出し対象には、以下のインジェクションが指定できます。
                              ・オブジェクトインジェクション
                              ・サービスインジェクション
                              ・呼び出し対象を指定したメソッドインジェクション
                              ・静的メソッドインジェクション
                              ・静的フィールドインジェクション
                            -->
                            <target>
                                
                                <!-- 引数ありの静的メソッドインジェクション
                                  引数ありのメソッドを呼び出す場合は、引数の数だけ、
                                  子要素にargument要素を指定する。
                                -->
                                <static-invoke code="javax.imageio.ImageIO" name="getImageWritersByFormatName">
                                    
                                    <argument>jpeg</argument>
                                    
                                </static-invoke>
                                
                            </target>
                            
                        </invoke>
                        
                    </constructor>
                    
                </object>
                
            </attribute>
            
            <depends>#Service2</depends>
            
        </service>
        
        <service name="Service2"
                 code="java.util.HashMap">
            <attribute name="A">1</attribute>
            <attribute name="B">2</attribute>
        </service>
        
    </manager>
    
</server>
